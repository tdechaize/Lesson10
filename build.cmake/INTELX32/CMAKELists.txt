#-------------------------------------------------------------------------------------

# Test target of operating systems
if (CMAKE_HOST_WIN32)
# need CMake 3.25.0+ for IntelLLVM support of target link properties on Windows
# here is the target environment located
	SET(CMAKE_FIND_ROOT_PATH "C:/Program Files (x86)/Intel/oneAPI/compiler/latest/bin" )
    cmake_minimum_required(VERSION 3.25)
    if( NOT DEFINED CMAKE_C_COMPILER)
		SET(CMAKE_C_COMPILER "C:/Program Files (x86)/Intel/oneAPI/compiler/latest/bin/icx.exe" )
    endif()
    if( NOT DEFINED CMAKE_CXX_COMPILER)
		SET(CMAKE_CXX_COMPILER "C:/Program Files (x86)/Intel/oneAPI/compiler/latest/bin/icx.exe" )
    endif()
    if( NOT DEFINED CMAKE_RC_COMPILER)
		SET(CMAKE_RC_COMPILER "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/bin/$ENV{KIT_WIN_NUM}/x86/rc.exe" )
    endif()
else()
    # CMake 3.22.1 is the minimum recommended for IntelLLVM on Linux
    cmake_minimum_required(VERSION 3.22.1)
    if( NOT DEFINED CMAKE_C_COMPILER)
      set(CMAKE_C_COMPILER icx)
    endif()
    if( NOT DEFINED CMAKE_CXX_COMPILER)
      set(CMAKE_CXX_COMPILER icpx)
    endif()
    if( NOT DEFINED CMAKE_Fortran_COMPILER)
      set(CMAKE_Fortran_COMPILER ifx)
    endif()
endif()

# MANDATORY !!!!
find_package(IntelDPCPP REQUIRED)

# SET(CMAKE_CXX_EXTENSIONS ON)

message(STATUS "Setting OneAPI Intel C/C++ compiler flags with MSVC 32 bits")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32 ")
# set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} /MACHINE:X86 "/LIBPATH=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629\\lib\\x86" "/LIBPATH=C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22621.0\\um\\x86" ")
# set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} /MACHINE:X86 /SUBSYSTEM:WINDOWS")
include_directories(BEFORE "C:/Program Files (x86)/Intel/oneAPI/compiler/latest/include" "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/Include/$ENV{KIT_WIN_NUM}/um" "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/Include/$ENV{KIT_WIN_NUM}/shared" "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/Include/$ENV{KIT_WIN_NUM}/ucrt" "C:/Program Files/Microsoft Visual Studio/$ENV{VS_VERSION}/Community/VC/Tools/MSVC/$ENV{VS_NUM}/include")

message("Value of CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR} ")

if(${CMAKE_BUILD_TYPE} MATCHES Debug)
    message("CMAKE Debug Build for OneAPI Intel C/C++ compiler with Visual C/C++ 32 bits")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Z7 /D DEBUG /D _DEBUG")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Debug")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Debug")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Debug")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO /Zi ")	
elseif(${CMAKE_BUILD_TYPE} MATCHES Release)
    message("CMAKE Release Build for OneAPI Intel C/C++ compiler with Visual C/C++ 32 bits")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /D NDEBUG")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Release")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Release")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/binINTELX32/Release")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO  ")	
endif()

# like globber in "true" Makefile : search all sources in directory \src with format "*.c" and "*.rc"
file(GLOB SRC_FILES src/*.c src/*.rc)
# set(APPLI ${NAME_APPLI})

project(${NAME_APPLI}
        VERSION 1.0.0
        LANGUAGES C)
add_executable(${PROJECT_NAME} WIN32 ${SRC_FILES})

target_link_directories(${PROJECT_NAME} PUBLIC "C:/Program Files (x86)/Intel/oneAPI/compiler/latest/lib32" PUBLIC "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/Lib/$ENV{KIT_WIN_NUM}/um/x86" PUBLIC "C:/Program Files (x86)/Windows Kits/$ENV{KIT_WIN_VERSION}/Lib/$ENV{KIT_WIN_NUM}/ucrt/x86" PUBLIC "C:/Program Files/Microsoft Visual Studio/$ENV{VS_VERSION}/Community/VC/Tools/MSVC/$ENV{VS_NUM}/lib/x86")
target_link_libraries(${PROJECT_NAME} PUBLIC "glu32.lib" "opengl32.lib" "user32.lib" "advapi32.lib" "comdlg32.lib" "winmm.lib" "gdi32.lib" "shell32.lib" "kernel32.lib")
#-------------------------------------------------------------------------------------
